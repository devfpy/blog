{"title":"React/JSX 编码规范（Airbnb）","date":"2019-04-26T07:19:36.000Z","slug":"react-jsx-style-guide","tags":["React JSX"],"categories":["React"],"updated":"2019-04-26T09:17:04.591Z","content":"<h1 id=\"React-JSX-编码规范（Airbnb）\">React/JSX 编码规范（Airbnb）<a href=\"post/react-jsx-style-guide#React-JSX-编码规范（Airbnb）\"></a></h1><blockquote>\n<p>作者：王益达<br><br>链接：<a href=\"https://www.imooc.com/article/20073\" target=\"_blank\" rel=\"noopener\">https://www.imooc.com/article/20073</a><br><br>来源：慕课网<br><br>翻译整理自 <a href=\"https://github.com/airbnb/javascript/tree/master/react\" target=\"_blank\" rel=\"noopener\">Airbnb React/JSX Style Guide</a><br></p>\n</blockquote>\n<h2 id=\"基本规范\">基本规范<a href=\"post/react-jsx-style-guide#基本规范\"></a></h2><ul>\n<li>原则上每个文件只写一个组件, 多个无状态组件可以放在单个文件中. eslint: react/no-multi-comp.</li>\n<li>推荐使用 JSX 语法编写 React 组件, 而不是 React.createElement</li>\n</ul>\n<h2 id=\"创建组件的三种方式\">创建组件的三种方式<a href=\"post/react-jsx-style-guide#创建组件的三种方式\"></a></h2><p>Class vs React.createClass vs stateless</p>\n<ul>\n<li>如果你的组件有内部状态或者是refs, 推荐使用 class extends React.Component 而不是 React.createClass.<br>eslint: react/prefer-es6-class react/prefer-stateless-function</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">const Listing = React.createClass(&#123;</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">      return &lt;div&gt;&#123;this.state.hello&#125;&lt;/div&gt;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">class Listing extends React.Component &#123;</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">      return &lt;div&gt;&#123;this.state.hello&#125;&lt;/div&gt;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果你的组件没有状态或是没有引用refs, 推荐使用普通函数（非箭头函数）而不是类:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">class Listing extends React.Component &#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">      return &lt;div&gt;&#123;this.props.hello&#125;&lt;/div&gt;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// bad (relying on function name inference is discouraged)</span><br><span class=\"line\">const Listing = (&#123; hello &#125;) =&gt; (</span><br><span class=\"line\">    &lt;div&gt;&#123;hello&#125;&lt;/div&gt;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">function Listing(&#123; hello &#125;) &#123;</span><br><span class=\"line\">    return &lt;div&gt;&#123;hello&#125;&lt;/div&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Mixins\">Mixins<a href=\"post/react-jsx-style-guide#Mixins\"></a></h2><ul>\n<li><a href=\"https://facebook.github.io/react/blog/2016/07/13/mixins-considered-harmful.html\" target=\"_blank\" rel=\"noopener\">不要使用 mixins.</a><blockquote>\n<p>因为 Mixins 会增加隐式依赖, 导致命名冲突, 并且会增加复杂度.大多数情况下, 可以更好的方法代替 Mixins, 如：组件化, 高阶组件, 工具组件等.</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"命名\">命名<a href=\"post/react-jsx-style-guide#命名\"></a></h2><ul>\n<li><p>扩展名: React 组件使用 .jsx 扩展名.<br>文件名: 文件名使用帕斯卡命名. 如, ReservationCard.jsx.<br>引用命名: React组件名使用帕斯卡命名, 实例使用骆驼式命名. eslint: react/jsx-pascal-case</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">import reservationCard from &apos;./ReservationCard&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">import ReservationCard from &apos;./ReservationCard&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// bad</span><br><span class=\"line\">const ReservationItem = &lt;ReservationCard /&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">const reservationItem = &lt;ReservationCard /&gt;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>组件命名: 组件名与当前文件名一致. 如 ReservationCard.jsx 应该包含名为 ReservationCard的组件. 如果整个目录是一个组件, 使用 index.js作为入口文件, 然后直接使用 index.js 或者目录名作为组件的名称:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">import Footer from &apos;./Footer/Footer&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// bad</span><br><span class=\"line\">import Footer from &apos;./Footer/index&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">import Footer from &apos;./Footer&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>高阶组件命名: 生成一个新的组件时, 其中的组件名 displayName 应该为高阶组件名和传入组件名的组合. 例如, 高阶组件 withFoo(), 当传入一个 Bar 组件的时候, 生成的组件名 displayName 应该为 withFoo(Bar).</p>\n<blockquote>\n<p>因为一个组件的 displayName 可能在调试工具或错误信息中使用到. 清晰合理的命名, 能帮助我们更好的理解组件执行过程, 更好的 Debug.</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">export default function withFoo(WrappedComponent) &#123;</span><br><span class=\"line\">  return function WithFoo(props) &#123;</span><br><span class=\"line\">    return &lt;WrappedComponent &#123;...props&#125; foo /&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">export default function withFoo(WrappedComponent) &#123;</span><br><span class=\"line\">    function WithFoo(props) &#123;</span><br><span class=\"line\">        return &lt;WrappedComponent &#123;...props&#125; foo /&gt;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    const wrappedComponentName = WrappedComponent.displayName</span><br><span class=\"line\">      || WrappedComponent.name</span><br><span class=\"line\">      || &apos;Component&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    WithFoo.displayName = `withFoo($&#123;wrappedComponentName&#125;)`;</span><br><span class=\"line\">    return WithFoo;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>属性命名: 避免使用 DOM 相关的属性来用命名自定义属性<blockquote>\n<p>因为对于style 和 className 这样的属性名, 我们都会默认它们代表一些特殊的含义.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">&lt;MyComponent style=&quot;fancy&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">&lt;MyComponent variant=&quot;fancy&quot; /&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"声明组件\">声明组件<a href=\"post/react-jsx-style-guide#声明组件\"></a></h2><ul>\n<li>不要使用 displayName 来命名 React 组件, 而是使用引用来命名组件, 如 class 名称.<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">export default React.createClass(&#123;</span><br><span class=\"line\">    displayName: &apos;ReservationCard&apos;,</span><br><span class=\"line\">    // stuff goes here</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">export default class ReservationCard extends React.Component &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"代码缩进\">代码缩进<a href=\"post/react-jsx-style-guide#代码缩进\"></a></h2><ul>\n<li>遵循以下的 JSX 语法缩进/格式. eslint: react/jsx-closing-bracket-location<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">&lt;Foo superLongParam=&quot;bar&quot;</span><br><span class=\"line\">    anotherSuperLongParam=&quot;baz&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// good, 有多行属性的话, 新建一行关闭标签</span><br><span class=\"line\">&lt;Foo</span><br><span class=\"line\">    superLongParam=&quot;bar&quot;</span><br><span class=\"line\">    anotherSuperLongParam=&quot;baz&quot;</span><br><span class=\"line\">/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 若能在一行中显示, 直接写成一行</span><br><span class=\"line\">&lt;Foo bar=&quot;bar&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// 子元素按照常规方式缩进</span><br><span class=\"line\">&lt;Foo</span><br><span class=\"line\">    superLongParam=&quot;bar&quot;</span><br><span class=\"line\">    anotherSuperLongParam=&quot;baz&quot;</span><br><span class=\"line\">&gt;</span><br><span class=\"line\">    &lt;Quux /&gt;</span><br><span class=\"line\">&lt;/Foo&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"使用双引号\">使用双引号<a href=\"post/react-jsx-style-guide#使用双引号\"></a></h2><ul>\n<li>对于 JSX 属性值总是使用双引号(“), 其他均使用单引号(‘). eslint: jsx-quotes<blockquote>\n<p>因为 HTML 属性也是用双引号, 因此 JSX 的属性也遵循此约定.</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">&lt;Foo bar=&apos;bar&apos; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">&lt;Foo bar=&quot;bar&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// bad</span><br><span class=\"line\">&lt;Foo style=&#123;&#123; left: &quot;20px&quot; &#125;&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">&lt;Foo style=&#123;&#123; left: &apos;20px&apos; &#125;&#125; /&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"空格\">空格<a href=\"post/react-jsx-style-guide#空格\"></a></h2><ul>\n<li><p>总是在自动关闭的标签前加一个空格, 正常情况下不需要换行. eslint: no-multi-spaces, react/jsx-tag-spacing</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">&lt;Foo/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// very bad</span><br><span class=\"line\">&lt;Foo                 /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// bad</span><br><span class=\"line\">&lt;Foo</span><br><span class=\"line\"> /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">&lt;Foo /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不要在JSX {} 引用括号里两边加空格. eslint: react/jsx-curly-spacing</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">&lt;Foo bar=&#123; baz &#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">&lt;Foo bar=&#123;baz&#125; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"属性\">属性<a href=\"post/react-jsx-style-guide#属性\"></a></h2><ul>\n<li><p>JSX 属性名使用骆驼式风格camelCase.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">&lt;Foo</span><br><span class=\"line\">    UserName=&quot;hello&quot;</span><br><span class=\"line\">    phone_number=&#123;12345678&#125;</span><br><span class=\"line\">/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">&lt;Foo</span><br><span class=\"line\">    userName=&quot;hello&quot;</span><br><span class=\"line\">    phoneNumber=&#123;12345678&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果属性值为 true, 可以直接省略. eslint: react/jsx-boolean-value</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">&lt;Foo hidden=&#123;true&#125; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">&lt;Foo hidden /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><img> 标签总是添加 alt 属性. 如果图片以陈述方式显示, alt 可为空, 或者<img> 要包含role=”presentation”. eslint: jsx-a11y/alt-text</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">&lt;img src=&quot;hello.jpg&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">&lt;img src=&quot;hello.jpg&quot; alt=&quot;Me waving hello&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">&lt;img src=&quot;hello.jpg&quot; alt=&quot;&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">&lt;img src=&quot;hello.jpg&quot; role=&quot;presentation&quot; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不要在 alt 值里使用如 “image”, “photo”, or “picture” 包括图片含义这样的词, 中文同理. eslint: jsx-a11y/img-redundant-alt</p>\n<blockquote>\n<p>因为屏幕助读器已经把 img 标签标注为图片了, 所以没有必要再在 alt 里重复说明.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">&lt;img src=&quot;hello.jpg&quot; alt=&quot;Picture of me waving hello&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">&lt;img src=&quot;hello.jpg&quot; alt=&quot;Me waving hello&quot; /&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>使用有效正确的 aria role属性值 ARIA roles. eslint: jsx-a11y/aria-role</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad - not an ARIA role</span><br><span class=\"line\">&lt;div role=&quot;datepicker&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// bad - abstract ARIA role</span><br><span class=\"line\">&lt;div role=&quot;range&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">&lt;div role=&quot;button&quot; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不要在标签上使用 accessKey 属性. eslint: jsx-a11y/no-access-key</p>\n<blockquote>\n<p>因为屏幕助读器在键盘快捷键与键盘命令时造成的不统一性会导致阅读性更加复杂.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">&lt;div accessKey=&quot;h&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">&lt;div /&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>避免使用数组的 index 来作为属性key的值, 推荐使用唯一ID. (Index as a key is an anti pattern)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">&#123;todos.map((todo, index) =&gt;</span><br><span class=\"line\">&lt;Todo</span><br><span class=\"line\">    &#123;...todo&#125;</span><br><span class=\"line\">    key=&#123;index&#125;</span><br><span class=\"line\">/&gt;</span><br><span class=\"line\">)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">&#123;todos.map(todo =&gt; (</span><br><span class=\"line\">&lt;Todo</span><br><span class=\"line\">    &#123;...todo&#125;</span><br><span class=\"line\">    key=&#123;todo.id&#125;</span><br><span class=\"line\">/&gt;</span><br><span class=\"line\">))&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>对于所有非必填写属性, 总是手动去定义defaultProps属性.</p>\n<blockquote>\n<p>因为 propTypes 可以作为组件的文档说明, 而声明 defaultProps 使阅读代码的人不需要去假设默认值. 另外, 显式的声明默认属性可以让你的组件跳过属性类型的检查.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">function SFC(&#123; foo, bar, children &#125;) &#123;</span><br><span class=\"line\">    return &lt;div&gt;&#123;foo&#125;&#123;bar&#125;&#123;children&#125;&lt;/div&gt;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">SFC.propTypes = &#123;</span><br><span class=\"line\">    foo: PropTypes.number.isRequired,</span><br><span class=\"line\">    bar: PropTypes.string,</span><br><span class=\"line\">    children: PropTypes.node,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">function SFC(&#123; foo, bar, children &#125;) &#123;</span><br><span class=\"line\">    return &lt;div&gt;&#123;foo&#125;&#123;bar&#125;&#123;children&#125;&lt;/div&gt;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">SFC.propTypes = &#123;</span><br><span class=\"line\">    foo: PropTypes.number.isRequired,</span><br><span class=\"line\">    bar: PropTypes.string,</span><br><span class=\"line\">    children: PropTypes.node,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">SFC.defaultProps = &#123;</span><br><span class=\"line\">    bar: &apos;&apos;,</span><br><span class=\"line\">    children: null,</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"Refs\">Refs<a href=\"post/react-jsx-style-guide#Refs\"></a></h2><ul>\n<li>总是使用回调函数方式定义 ref. eslint: react/no-string-refs<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">&lt;Foo</span><br><span class=\"line\">    ref=&quot;myRef&quot;</span><br><span class=\"line\">/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">&lt;Foo</span><br><span class=\"line\">    ref=&#123;(ref) =&gt; &#123; this.myRef = ref; &#125;&#125;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"括号\">括号<a href=\"post/react-jsx-style-guide#括号\"></a></h2><ul>\n<li>将多行 JSX 标签写在 ()里. eslint: react/jsx-wrap-multilines<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">  return &lt;MyComponent className=&quot;long body&quot; foo=&quot;bar&quot;&gt;</span><br><span class=\"line\">           &lt;MyChild /&gt;</span><br><span class=\"line\">         &lt;/MyComponent&gt;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;MyComponent className=&quot;long body&quot; foo=&quot;bar&quot;&gt;</span><br><span class=\"line\">        &lt;MyChild /&gt;</span><br><span class=\"line\">      &lt;/MyComponent&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// good, 单行可以不需要</span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">    const body = &lt;div&gt;hello&lt;/div&gt;;</span><br><span class=\"line\">    return &lt;MyComponent&gt;&#123;body&#125;&lt;/MyComponent&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"标签\">标签<a href=\"post/react-jsx-style-guide#标签\"></a></h2><ul>\n<li><p>对于没有子元素的标签, 总是自关闭标签. eslint: react/self-closing-comp</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">&lt;Foo className=&quot;stuff&quot;&gt;&lt;/Foo&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">&lt;Foo className=&quot;stuff&quot; /&gt;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果组件有多行的属性, 关闭标签时新建一行. eslint: react/jsx-closing-bracket-location</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">&lt;Foo</span><br><span class=\"line\">    bar=&quot;bar&quot;</span><br><span class=\"line\">    baz=&quot;baz&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">&lt;Foo</span><br><span class=\"line\">    bar=&quot;bar&quot;</span><br><span class=\"line\">    baz=&quot;baz&quot;</span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"函数-方法\">函数/方法<a href=\"post/react-jsx-style-guide#函数-方法\"></a></h2><ul>\n<li><p>使用箭头函数来获取本地变量.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function ItemList(props) &#123;</span><br><span class=\"line\">    return (</span><br><span class=\"line\">      &lt;ul&gt;</span><br><span class=\"line\">        &#123;props.items.map((item, index) =&gt; (</span><br><span class=\"line\">          &lt;Item</span><br><span class=\"line\">            key=&#123;item.key&#125;</span><br><span class=\"line\">            onClick=&#123;() =&gt; doSomethingWith(item.name, index)&#125;</span><br><span class=\"line\">          /&gt;</span><br><span class=\"line\">        ))&#125;</span><br><span class=\"line\">      &lt;/ul&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>当在 render() 里使用事件处理方法时, 提前在构造函数里把 this 绑定上去. eslint: react/jsx-no-bind</p>\n<blockquote>\n<p>因为在每次 render 过程中, 再调用 bind 都会新建一个新的函数, 浪费资源.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">class extends React.Component &#123;</span><br><span class=\"line\">    onClickDiv() &#123;</span><br><span class=\"line\">      // do stuff</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">      return &lt;div onClick=&#123;this.onClickDiv.bind(this)&#125; /&gt;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">class extends React.Component &#123;</span><br><span class=\"line\">    constructor(props) &#123;</span><br><span class=\"line\">    super(props);</span><br><span class=\"line\"></span><br><span class=\"line\">        this.onClickDiv = this.onClickDiv.bind(this);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    onClickDiv() &#123;</span><br><span class=\"line\">        // do stuff</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        return &lt;div onClick=&#123;this.onClickDiv&#125; /&gt;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>在React组件中, 不要给所谓的私有函数添加 _ 前缀, 本质上它并不是私有的.</p>\n<blockquote>\n<p>因为_ 下划线前缀在某些语言中通常被用来表示私有变量或者函数. 但是不像其他的一些语言, 在 JS 中没有原生支持所谓的私有变量, 所有的变量函数都是共有的. 了解更多详情请查看 Issue <a href=\"https://github.com/airbnb/javascript/issues/1024\" target=\"_blank\" rel=\"noopener\">#1024</a>, 和 <a href=\"https://github.com/airbnb/javascript/issues/490\" target=\"_blank\" rel=\"noopener\">#490</a> .</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">React.createClass(&#123;</span><br><span class=\"line\">    _onClickSubmit() &#123;</span><br><span class=\"line\">        // do stuff</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    // other stuff</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">class extends React.Component &#123;</span><br><span class=\"line\">    onClickSubmit() &#123;</span><br><span class=\"line\">        // do stuff</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    // other stuff</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n<li><p>在 render 方法中总是确保 return 返回值. eslint: react/require-render-return</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">    (&lt;div /&gt;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">render() &#123;</span><br><span class=\"line\">    return (&lt;div /&gt;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"组件生命周期书写顺序\">组件生命周期书写顺序<a href=\"post/react-jsx-style-guide#组件生命周期书写顺序\"></a></h2><ul>\n<li>class extends React.Component 的生命周期函数:</li>\n</ul>\n<ol>\n<li>static 方法（可选）</li>\n<li>constructor 构造函数</li>\n<li>getChildContext 获取子元素内容</li>\n<li>componentWillMount 组件渲染前</li>\n<li>componentDidMount 组件渲染后</li>\n<li>componentWillReceiveProps 组件将接受新的数据</li>\n<li>shouldComponentUpdate 判断组件是否需要重新渲染</li>\n<li>componentWillUpdate 上面的方法返回 true时, 组件将重新渲染</li>\n<li>componentDidUpdate 组件渲染结束</li>\n<li>componentWillUnmount 组件将从DOM中清除, 做一些清理任务</li>\n<li>事件绑定 如 onClickSubmit() 或 onChangeDescription()</li>\n<li>render 里的 getter 方法 如 getSelectReason() 或 getFooterContent()</li>\n<li>可选的 render 方法 如 renderNavigation() 或 renderProfilePicture()</li>\n<li>render render() 方法</li>\n</ol>\n<ul>\n<li><p>如何定义 propTypes, defaultProps, contextTypes 等属性…</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; PropTypes &#125; from &apos;react&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">const propTypes = &#123;</span><br><span class=\"line\">    id: PropTypes.number.isRequired,</span><br><span class=\"line\">    url: PropTypes.string.isRequired,</span><br><span class=\"line\">    text: PropTypes.string,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">const defaultProps = &#123;</span><br><span class=\"line\">    text: &apos;Hello World&apos;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">class Link extends React.Component &#123;</span><br><span class=\"line\">    static methodsAreOk() &#123;</span><br><span class=\"line\">        return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">        return &lt;a href=&#123;this.props.url&#125; data-id=&#123;this.props.id&#125;&gt;&#123;this.props.text&#125;&lt;/a&gt;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Link.propTypes = propTypes;</span><br><span class=\"line\">Link.defaultProps = defaultProps;</span><br><span class=\"line\"></span><br><span class=\"line\">export default Link;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>React.createClass 方式的生命周期函数（不推荐）与 ES6 class 方式稍有不同: eslint: react/sort-comp</p>\n</li>\n</ul>\n<ol>\n<li>displayName 设定组件名称</li>\n<li>propTypes 设置属性的类型</li>\n<li>contextTypes 设置上下文类型</li>\n<li>childContextTypes 设置子元素上下文类型</li>\n<li>mixins 添加一些 mixins</li>\n<li>statics</li>\n<li>defaultProps 设置默认的属性值</li>\n<li>getDefaultProps 获取默认属性值</li>\n<li>getInitialState 获取初始状态</li>\n<li>getChildContext</li>\n<li>componentWillMount</li>\n<li>componentDidMount</li>\n<li>componentWillReceiveProps</li>\n<li>shouldComponentUpdate</li>\n<li>componentWillUpdate</li>\n<li>componentDidUpdate</li>\n<li>componentWillUnmount</li>\n<li>clickHandlers or eventHandlers like onClickSubmit() or onChangeDescription()</li>\n<li>getter methods for render like getSelectReason() or getFooterContent()</li>\n<li>Optional render methods like renderNavigation() or renderProfilePicture()</li>\n<li>render</li>\n</ol>\n<h2 id=\"isMounted\">isMounted<a href=\"post/react-jsx-style-guide#isMounted\"></a></h2><ul>\n<li>不要再使用 isMounted. eslint: react/no-is-mounted<blockquote>\n<p>因为isMounted 设计模式 在 ES6 class 中无法使用, 官方将在未来的版本里删除此方法.</p>\n</blockquote>\n</li>\n</ul>\n","prev":{"title":"React 顺序依次执行","slug":"react-js-shunxuyicizhixing"},"next":{"title":"iOS 读取Resource中的图片的正确姿势","slug":"ios-read-resourceimage"},"link":"https://devfpy.github.io/post/react-jsx-style-guide/","toc":[{"title":"React/JSX 编码规范（Airbnb）","id":"React-JSX-编码规范（Airbnb）","index":"1","children":[{"title":"基本规范","id":"基本规范","index":"1.1"},{"title":"创建组件的三种方式","id":"创建组件的三种方式","index":"1.2"},{"title":"Mixins","id":"Mixins","index":"1.3"},{"title":"命名","id":"命名","index":"1.4"},{"title":"声明组件","id":"声明组件","index":"1.5"},{"title":"代码缩进","id":"代码缩进","index":"1.6"},{"title":"使用双引号","id":"使用双引号","index":"1.7"},{"title":"空格","id":"空格","index":"1.8"},{"title":"属性","id":"属性","index":"1.9"},{"title":"Refs","id":"Refs","index":"1.10"},{"title":"括号","id":"括号","index":"1.11"},{"title":"标签","id":"标签","index":"1.12"},{"title":"函数/方法","id":"函数-方法","index":"1.13"},{"title":"组件生命周期书写顺序","id":"组件生命周期书写顺序","index":"1.14"},{"title":"isMounted","id":"isMounted","index":"1.15"}]}]}