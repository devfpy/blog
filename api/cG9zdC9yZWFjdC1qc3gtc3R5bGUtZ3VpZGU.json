{"title":"React/JSX 编码规范（Airbnb）","date":"2019-04-26T07:19:36.000Z","slug":"react-jsx-style-guide","tags":["React JSX"],"categories":["React"],"updated":"2019-04-26T07:46:48.226Z","content":"<h1 id=\"React-JSX-编码规范（Airbnb）\">React/JSX 编码规范（Airbnb）<a href=\"post/react-jsx-style-guide#React-JSX-编码规范（Airbnb）\"></a></h1><blockquote>\n<p>作者：王益达<br><br>链接：<a href=\"https://www.imooc.com/article/20073\" target=\"_blank\" rel=\"noopener\">https://www.imooc.com/article/20073</a><br><br>来源：慕课网<br><br>翻译整理自 <a href=\"https://github.com/airbnb/javascript/tree/master/react\" target=\"_blank\" rel=\"noopener\">Airbnb React/JSX Style Guide</a><br></p>\n</blockquote>\n<h2 id=\"基本规范\">基本规范<a href=\"post/react-jsx-style-guide#基本规范\"></a></h2><ul>\n<li>原则上每个文件只写一个组件, 多个无状态组件可以放在单个文件中. eslint: react/no-multi-comp.</li>\n<li>推荐使用 JSX 语法编写 React 组件, 而不是 React.createElement</li>\n</ul>\n<h2 id=\"创建组件的三种方式\">创建组件的三种方式<a href=\"post/react-jsx-style-guide#创建组件的三种方式\"></a></h2><p>Class vs React.createClass vs stateless</p>\n<ul>\n<li>如果你的组件有内部状态或者是refs, 推荐使用 class extends React.Component 而不是 React.createClass.<br>eslint: react/prefer-es6-class react/prefer-stateless-function</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">const Listing = React.createClass(&#123;</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">      return &lt;div&gt;&#123;this.state.hello&#125;&lt;/div&gt;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">class Listing extends React.Component &#123;</span><br><span class=\"line\">    // ...</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">      return &lt;div&gt;&#123;this.state.hello&#125;&lt;/div&gt;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>如果你的组件没有状态或是没有引用refs, 推荐使用普通函数（非箭头函数）而不是类:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">class Listing extends React.Component &#123;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">      return &lt;div&gt;&#123;this.props.hello&#125;&lt;/div&gt;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// bad (relying on function name inference is discouraged)</span><br><span class=\"line\">const Listing = (&#123; hello &#125;) =&gt; (</span><br><span class=\"line\">    &lt;div&gt;&#123;hello&#125;&lt;/div&gt;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">function Listing(&#123; hello &#125;) &#123;</span><br><span class=\"line\">    return &lt;div&gt;&#123;hello&#125;&lt;/div&gt;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"Mixins\">Mixins<a href=\"post/react-jsx-style-guide#Mixins\"></a></h2><ul>\n<li><a href=\"https://facebook.github.io/react/blog/2016/07/13/mixins-considered-harmful.html\" target=\"_blank\" rel=\"noopener\">不要使用 mixins.</a><blockquote>\n<p>因为 Mixins 会增加隐式依赖, 导致命名冲突, 并且会增加复杂度.大多数情况下, 可以更好的方法代替 Mixins, 如：组件化, 高阶组件, 工具组件等.</p>\n</blockquote>\n</li>\n</ul>\n<p>##命名</p>\n<ul>\n<li><p>扩展名: React 组件使用 .jsx 扩展名.<br>文件名: 文件名使用帕斯卡命名. 如, ReservationCard.jsx.<br>引用命名: React组件名使用帕斯卡命名, 实例使用骆驼式命名. eslint: react/jsx-pascal-case</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">import reservationCard from &apos;./ReservationCard&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">import ReservationCard from &apos;./ReservationCard&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// bad</span><br><span class=\"line\">const ReservationItem = &lt;ReservationCard /&gt;;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">const reservationItem = &lt;ReservationCard /&gt;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>组件命名: 组件名与当前文件名一致. 如 ReservationCard.jsx 应该包含名为 ReservationCard的组件. 如果整个目录是一个组件, 使用 index.js作为入口文件, 然后直接使用 index.js 或者目录名作为组件的名称:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">import Footer from &apos;./Footer/Footer&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// bad</span><br><span class=\"line\">import Footer from &apos;./Footer/index&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">import Footer from &apos;./Footer&apos;;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>高阶组件命名: 生成一个新的组件时, 其中的组件名 displayName 应该为高阶组件名和传入组件名的组合. 例如, 高阶组件 withFoo(), 当传入一个 Bar 组件的时候, 生成的组件名 displayName 应该为 withFoo(Bar).</p>\n<blockquote>\n<p>因为一个组件的 displayName 可能在调试工具或错误信息中使用到. 清晰合理的命名, 能帮助我们更好的理解组件执行过程, 更好的 Debug.</p>\n</blockquote>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">export default function withFoo(WrappedComponent) &#123;</span><br><span class=\"line\">  return function WithFoo(props) &#123;</span><br><span class=\"line\">    return &lt;WrappedComponent &#123;...props&#125; foo /&gt;;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">export default function withFoo(WrappedComponent) &#123;</span><br><span class=\"line\">    function WithFoo(props) &#123;</span><br><span class=\"line\">        return &lt;WrappedComponent &#123;...props&#125; foo /&gt;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    const wrappedComponentName = WrappedComponent.displayName</span><br><span class=\"line\">      || WrappedComponent.name</span><br><span class=\"line\">      || &apos;Component&apos;;</span><br><span class=\"line\"></span><br><span class=\"line\">    WithFoo.displayName = `withFoo($&#123;wrappedComponentName&#125;)`;</span><br><span class=\"line\">    return WithFoo;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>属性命名: 避免使用 DOM 相关的属性来用命名自定义属性<blockquote>\n<p>因为对于style 和 className 这样的属性名, 我们都会默认它们代表一些特殊的含义.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// bad</span><br><span class=\"line\">&lt;MyComponent style=&quot;fancy&quot; /&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">// good</span><br><span class=\"line\">&lt;MyComponent variant=&quot;fancy&quot; /&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul>\n","next":{"title":"iOS 读取Resource中的图片的正确姿势","slug":"ios-read-resourceimage"},"link":"https://devfpy.github.io/post/react-jsx-style-guide/","toc":[{"title":"React/JSX 编码规范（Airbnb）","id":"React-JSX-编码规范（Airbnb）","index":"1","children":[{"title":"基本规范","id":"基本规范","index":"1.1"},{"title":"创建组件的三种方式","id":"创建组件的三种方式","index":"1.2"},{"title":"Mixins","id":"Mixins","index":"1.3"}]}]}