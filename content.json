{"meta":{"title":"哎而咕","subtitle":null,"description":null,"author":"devFpy","url":"https://devfpy.github.io"},"pages":[],"posts":[{"title":"React/JSX 编码规范（Airbnb）","slug":"react-jsx-style-guide","date":"2019-04-26T07:19:36.000Z","updated":"2019-04-26T07:46:48.226Z","comments":false,"path":"post/react-jsx-style-guide/","link":"https://devfpy.github.io/post/react-jsx-style-guide/","permalink":"https://devfpy.github.io/post/react-jsx-style-guide/","excerpt":"","text":"React/JSX 编码规范（Airbnb） 作者：王益达链接：https://www.imooc.com/article/20073来源：慕课网翻译整理自 Airbnb React/JSX Style Guide 基本规范 原则上每个文件只写一个组件, 多个无状态组件可以放在单个文件中. eslint: react/no-multi-comp. 推荐使用 JSX 语法编写 React 组件, 而不是 React.createElement 创建组件的三种方式Class vs React.createClass vs stateless 如果你的组件有内部状态或者是refs, 推荐使用 class extends React.Component 而不是 React.createClass.eslint: react/prefer-es6-class react/prefer-stateless-function 123456789101112131415// badconst Listing = React.createClass(&#123; // ... render() &#123; return &lt;div&gt;&#123;this.state.hello&#125;&lt;/div&gt;; &#125;&#125;);// goodclass Listing extends React.Component &#123; // ... render() &#123; return &lt;div&gt;&#123;this.state.hello&#125;&lt;/div&gt;; &#125;&#125; 如果你的组件没有状态或是没有引用refs, 推荐使用普通函数（非箭头函数）而不是类:12345678910111213141516// badclass Listing extends React.Component &#123; render() &#123; return &lt;div&gt;&#123;this.props.hello&#125;&lt;/div&gt;; &#125;&#125;// bad (relying on function name inference is discouraged)const Listing = (&#123; hello &#125;) =&gt; ( &lt;div&gt;&#123;hello&#125;&lt;/div&gt;);// goodfunction Listing(&#123; hello &#125;) &#123; return &lt;div&gt;&#123;hello&#125;&lt;/div&gt;;&#125; Mixins 不要使用 mixins. 因为 Mixins 会增加隐式依赖, 导致命名冲突, 并且会增加复杂度.大多数情况下, 可以更好的方法代替 Mixins, 如：组件化, 高阶组件, 工具组件等. ##命名 扩展名: React 组件使用 .jsx 扩展名.文件名: 文件名使用帕斯卡命名. 如, ReservationCard.jsx.引用命名: React组件名使用帕斯卡命名, 实例使用骆驼式命名. eslint: react/jsx-pascal-case 1234567891011// badimport reservationCard from &apos;./ReservationCard&apos;;// goodimport ReservationCard from &apos;./ReservationCard&apos;;// badconst ReservationItem = &lt;ReservationCard /&gt;;// goodconst reservationItem = &lt;ReservationCard /&gt;; 组件命名: 组件名与当前文件名一致. 如 ReservationCard.jsx 应该包含名为 ReservationCard的组件. 如果整个目录是一个组件, 使用 index.js作为入口文件, 然后直接使用 index.js 或者目录名作为组件的名称: 12345678// badimport Footer from &apos;./Footer/Footer&apos;;// badimport Footer from &apos;./Footer/index&apos;;// goodimport Footer from &apos;./Footer&apos;; 高阶组件命名: 生成一个新的组件时, 其中的组件名 displayName 应该为高阶组件名和传入组件名的组合. 例如, 高阶组件 withFoo(), 当传入一个 Bar 组件的时候, 生成的组件名 displayName 应该为 withFoo(Bar). 因为一个组件的 displayName 可能在调试工具或错误信息中使用到. 清晰合理的命名, 能帮助我们更好的理解组件执行过程, 更好的 Debug. 1234567891011121314151617181920// badexport default function withFoo(WrappedComponent) &#123; return function WithFoo(props) &#123; return &lt;WrappedComponent &#123;...props&#125; foo /&gt;; &#125;&#125;// goodexport default function withFoo(WrappedComponent) &#123; function WithFoo(props) &#123; return &lt;WrappedComponent &#123;...props&#125; foo /&gt;; &#125; const wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || &apos;Component&apos;; WithFoo.displayName = `withFoo($&#123;wrappedComponentName&#125;)`; return WithFoo;&#125; 属性命名: 避免使用 DOM 相关的属性来用命名自定义属性 因为对于style 和 className 这样的属性名, 我们都会默认它们代表一些特殊的含义. 12345// bad&lt;MyComponent style=&quot;fancy&quot; /&gt;// good&lt;MyComponent variant=&quot;fancy&quot; /&gt;","categories":[{"name":"React","slug":"React","permalink":"https://devfpy.github.io/categories/React/"}],"tags":[{"name":"React JSX","slug":"React-JSX","permalink":"https://devfpy.github.io/tags/React-JSX/"}]},{"title":"iOS 读取Resource中的图片的正确姿势","slug":"ios-read-resourceimage","date":"2019-04-17T09:19:01.000Z","updated":"2019-04-17T09:19:28.036Z","comments":false,"path":"post/ios-read-resourceimage/","link":"https://devfpy.github.io/post/ios-read-resourceimage/","permalink":"https://devfpy.github.io/post/ios-read-resourceimage/","excerpt":"","text":"1234NSString *textFieldBgPath = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:@&quot;login_bg_usertelephone.png&quot;];[_viewUserTelephone setBackgroundColor:[UIColor colorWithPatternImage:[UIImage imageWithContentsOfFile:textFieldBgPath]]];[_viewUserTelephone setContentMode:UIViewContentModeScaleToFill];","categories":[{"name":"iOS","slug":"iOS","permalink":"https://devfpy.github.io/categories/iOS/"}],"tags":[]},{"title":"CRA+DVA+FusionDesgin 项目搭建过程","slug":"create-react-app-DVA-FusionDesgin-createProject","date":"2019-04-17T09:10:55.000Z","updated":"2019-04-17T10:59:27.225Z","comments":false,"path":"post/create-react-app-DVA-FusionDesgin-createProject/","link":"https://devfpy.github.io/post/create-react-app-DVA-FusionDesgin-createProject/","permalink":"https://devfpy.github.io/post/create-react-app-DVA-FusionDesgin-createProject/","excerpt":"","text":"1、项目初始化1creact-react-app nodiot-fusiondesgin-demo 2、安装DVA1cd nodiot-fusiondesgin-demo 1yarn add dva 3、安装FusionDesign1yarn add @alifd/next 4、配置FusionDesign按需加载 4.1 安装react-app-rewired 1yarn add react-app-rewired 4.2 安装customize-cra 1yarn add customize-cra 4.3 安装babel-plugin-import 1yarn add babel-plugin-import 4.4 在项目根目录创建「config-overrides.js」文件 4.5 在「config-overrides.js」文件中配置组件按需加载 123456789const &#123; override, fixBabelImports &#125; = require(&apos;customize-cra&apos;);module.exports = override( fixBabelImports(&apos;import&apos;, &#123; libraryName: &apos;@alifd/next&apos;, libraryDirectory: &apos;es&apos;, style: true &#125;),); 4.6 修改「package.json」文件 123456&quot;scripts&quot;: &#123; &quot;start&quot;: &quot;react-app-rewired start&quot;, &quot;build&quot;: &quot;react-app-rewired build&quot;, &quot;test&quot;: &quot;react-app-rewired test&quot;, &quot;eject&quot;: &quot;react-app-rewired eject&quot; &#125;, 5、配置sass文件及主题 5.1 安装「sass-loader、node-sass」 1yarn add node-sass sass-loader 5.2 安装主题 1234yarn add @alifd/theme-1yarn add @alifd/theme-2yarn add @alifd/theme-3yarn add @alifd/theme-4 5.3 安装「@alifd/next-theme-webpack-plugin、@alifd/next-theme-loader」 12yarn add @alifd/next-theme-loaderyarn add @alifd/next-theme-webpack-plugin 5.4 安装「happypack」 1yarn add happypack 5.5 在「package.json」中添加主题配置 123&quot;buildConfig&quot;: &#123; &quot;theme&quot;: &quot;@alifd/theme-1&quot;&#125; 5.6 配置「config-overrides.js」文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116const ThemePlugin = require(&apos;@alifd/next-theme-webpack-plugin&apos;);const MiniCssExtractPlugin = require(&apos;mini-css-extract-plugin&apos;);const os = require(&apos;os&apos;);const HappyPack = require(&apos;happypack&apos;);const happyThreadPool = HappyPack.ThreadPool(&#123; size: os.cpus().length &#125;);let theme = &apos;&apos;;try &#123; const pkg = require(&apos;./package.json&apos;); if (pkg &amp;&amp; pkg.buildConfig &amp;&amp; pkg.buildConfig.theme) &#123; theme = pkg.buildConfig.theme; &#125;&#125; catch (e) &#123; console.log(&quot;read theme config error &quot;, e); console.log(`请在 package.json 中配置 buildConfig:&#123; theme: &apos;@alife/dpl-主题包名&apos; &#125;`);&#125;let scssLoader = [ &#123; loader: &apos;css-loader&apos;, options: &#123; minimize: true, sourceMap: false, &#125;, &#125;, // &#123; // loader: require.resolve(&apos;postcss-loader&apos;),//&apos;postcss-loader&apos;, // options: &#123; // indent: &apos;postcss&apos;, // plugins: () =&gt; [ // require(&apos;autoprefixer&apos;)(), // ], // sourceMap: false, // &#125;, // &#125;, &#123; loader: &apos;sass-loader&apos;, options: &#123; sourceMap: false, &#125;, &#125;,];const addThemeLoader = config =&gt; &#123; if (theme) &#123; console.log(`NOTICE: 注入 $&#123;theme&#125;/variables.scss 到每个 scss 文件`.green); scssLoader.push(&#123; loader: &apos;@alifd/next-theme-loader&apos;, options: &#123; theme &#125;, &#125;); &#125; config.module.rules[2].oneOf[5] = &#123; test: /\\.(scss|sass)$/, exclude: /\\.module\\.(scss|sass)$/, use: [ MiniCssExtractPlugin.loader, &apos;happypack/loader?id=scss&apos;, ], &#125;; config.module.rules[2].oneOf[6] = &#123; test: /\\.module\\.(scss|sass)$/, use: [ MiniCssExtractPlugin.loader, &apos;happypack/loader?id=scss&apos;, ], &#125;; return config;&#125;const addHappyPackPlugin = config =&gt; &#123; config.plugins.push( new HappyPack(&#123; id: &apos;scss&apos;, threadPool: happyThreadPool, loaders: scssLoader, &#125;) ) return config;&#125;const addThemePlugin = config =&gt; &#123; config.plugins.push(new ThemePlugin(&#123; theme &#125;)) return config&#125;const addMiniCssExtractPlugin = config =&gt; &#123; config.plugins.push( new MiniCssExtractPlugin(&#123; filename: &apos;[name].bundle.css&apos;, chunkFilename: &apos;[name].bundle.css&apos;, &#125;) ) return config;&#125;module.exports = override( addThemeLoader, addHappyPackPlugin, addThemePlugin, addMiniCssExtractPlugin, fixBabelImports(&apos;import&apos;, &#123; libraryName: &apos;@alifd/next&apos;, libraryDirectory: &apos;es&apos;, style: true &#125;),); 6、修改「src/index.js」启用dva12345678910import React from &apos;react&apos;;import ReactDOM from &apos;react-dom&apos;;import dva from &apos;dva&apos;;import &apos;./index.css&apos;;import App from &apos;./App&apos;;import * as serviceWorker from &apos;./serviceWorker&apos;;const app = dva();app.router(() =&gt; &lt;App /&gt;);app.start(&apos;#root&apos;); 7、编写代码启动项目 在「src/App.js」文件中添加代码： 1234567891011121314import React, &#123; Component &#125; from &apos;react&apos;;import &#123; Button &#125; from &apos;@alifd/next&apos;;class App extends Component &#123; render() &#123; return ( &lt;div className=&quot;App&quot;&gt; &lt;Button type=&quot;primary&quot;&gt;Primary&lt;/Button&gt; &lt;/div&gt; ); &#125;&#125;export default App; 启动项目 1npm start 8、处理@connect装饰器报错问题安装plugin-proposal-decorators 1yarn add @babel/plugin-proposal-decorators 修改config-overrides.js文件内容 1const &#123; override, fixBabelImports, addWebpackAlias, disableEsLint, addDecoratorsLegacy &#125; = require(&apos;customize-cra&apos;); 12345678910111213141516module.exports = override( addThemeLoader, addHappyPackPlugin, addThemePlugin, addMiniCssExtractPlugin, addDecoratorsLegacy(), disableEsLint(), addWebpackAlias(&#123; &apos;@&apos;: path.resolve(__dirname, &apos;src&apos;), &#125;), fixBabelImports(&apos;import&apos;, &#123; libraryName: &apos;@alifd/next&apos;, libraryDirectory: &apos;es&apos;, style: true &#125;),);","categories":[{"name":"React","slug":"React","permalink":"https://devfpy.github.io/categories/React/"}],"tags":[]},{"title":"ReactNative Android Unable to load script from assets 'index.android.bundle'.","slug":"index-android-bundle","date":"2019-04-17T06:30:40.000Z","updated":"2019-04-17T09:14:28.945Z","comments":false,"path":"post/index-android-bundle/","link":"https://devfpy.github.io/post/index-android-bundle/","permalink":"https://devfpy.github.io/post/index-android-bundle/","excerpt":"","text":"Unable to load script from assets ‘index.android.bundle’.Make sure your bundle is packaged correctly or you’re running a packager server. 创建文件夹andoird-app-src-main-assets react-native bundle –platform android –dev false –entry-file index.js –bundle-output android/app/src/main/assets/index.android.bundle –assets-dest android/app/src/main/res","categories":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://devfpy.github.io/categories/ReactNative/"}],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-01-30T03:00:10.220Z","updated":"2019-01-30T03:00:10.220Z","comments":false,"path":"post/hello-world/","link":"https://devfpy.github.io/post/hello-world/","permalink":"https://devfpy.github.io/post/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}