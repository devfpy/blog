{"meta":{"title":"哎而咕","subtitle":null,"description":null,"author":"devFpy","url":"https://devfpy.github.io"},"pages":[],"posts":[{"title":"React/JSX 编码规范（Airbnb）","slug":"react-jsx-style-guide","date":"2019-04-26T07:19:36.000Z","updated":"2019-04-26T09:17:04.591Z","comments":false,"path":"post/react-jsx-style-guide/","link":"https://devfpy.github.io/post/react-jsx-style-guide/","permalink":"https://devfpy.github.io/post/react-jsx-style-guide/","excerpt":"","text":"React/JSX 编码规范（Airbnb） 作者：王益达链接：https://www.imooc.com/article/20073来源：慕课网翻译整理自 Airbnb React/JSX Style Guide 基本规范 原则上每个文件只写一个组件, 多个无状态组件可以放在单个文件中. eslint: react/no-multi-comp. 推荐使用 JSX 语法编写 React 组件, 而不是 React.createElement 创建组件的三种方式Class vs React.createClass vs stateless 如果你的组件有内部状态或者是refs, 推荐使用 class extends React.Component 而不是 React.createClass.eslint: react/prefer-es6-class react/prefer-stateless-function 123456789101112131415// badconst Listing = React.createClass(&#123; // ... render() &#123; return &lt;div&gt;&#123;this.state.hello&#125;&lt;/div&gt;; &#125;&#125;);// goodclass Listing extends React.Component &#123; // ... render() &#123; return &lt;div&gt;&#123;this.state.hello&#125;&lt;/div&gt;; &#125;&#125; 如果你的组件没有状态或是没有引用refs, 推荐使用普通函数（非箭头函数）而不是类:12345678910111213141516// badclass Listing extends React.Component &#123; render() &#123; return &lt;div&gt;&#123;this.props.hello&#125;&lt;/div&gt;; &#125;&#125;// bad (relying on function name inference is discouraged)const Listing = (&#123; hello &#125;) =&gt; ( &lt;div&gt;&#123;hello&#125;&lt;/div&gt;);// goodfunction Listing(&#123; hello &#125;) &#123; return &lt;div&gt;&#123;hello&#125;&lt;/div&gt;;&#125; Mixins 不要使用 mixins. 因为 Mixins 会增加隐式依赖, 导致命名冲突, 并且会增加复杂度.大多数情况下, 可以更好的方法代替 Mixins, 如：组件化, 高阶组件, 工具组件等. 命名 扩展名: React 组件使用 .jsx 扩展名.文件名: 文件名使用帕斯卡命名. 如, ReservationCard.jsx.引用命名: React组件名使用帕斯卡命名, 实例使用骆驼式命名. eslint: react/jsx-pascal-case 1234567891011// badimport reservationCard from &apos;./ReservationCard&apos;;// goodimport ReservationCard from &apos;./ReservationCard&apos;;// badconst ReservationItem = &lt;ReservationCard /&gt;;// goodconst reservationItem = &lt;ReservationCard /&gt;; 组件命名: 组件名与当前文件名一致. 如 ReservationCard.jsx 应该包含名为 ReservationCard的组件. 如果整个目录是一个组件, 使用 index.js作为入口文件, 然后直接使用 index.js 或者目录名作为组件的名称: 12345678// badimport Footer from &apos;./Footer/Footer&apos;;// badimport Footer from &apos;./Footer/index&apos;;// goodimport Footer from &apos;./Footer&apos;; 高阶组件命名: 生成一个新的组件时, 其中的组件名 displayName 应该为高阶组件名和传入组件名的组合. 例如, 高阶组件 withFoo(), 当传入一个 Bar 组件的时候, 生成的组件名 displayName 应该为 withFoo(Bar). 因为一个组件的 displayName 可能在调试工具或错误信息中使用到. 清晰合理的命名, 能帮助我们更好的理解组件执行过程, 更好的 Debug. 1234567891011121314151617181920// badexport default function withFoo(WrappedComponent) &#123; return function WithFoo(props) &#123; return &lt;WrappedComponent &#123;...props&#125; foo /&gt;; &#125;&#125;// goodexport default function withFoo(WrappedComponent) &#123; function WithFoo(props) &#123; return &lt;WrappedComponent &#123;...props&#125; foo /&gt;; &#125; const wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || &apos;Component&apos;; WithFoo.displayName = `withFoo($&#123;wrappedComponentName&#125;)`; return WithFoo;&#125; 属性命名: 避免使用 DOM 相关的属性来用命名自定义属性 因为对于style 和 className 这样的属性名, 我们都会默认它们代表一些特殊的含义. 12345// bad&lt;MyComponent style=&quot;fancy&quot; /&gt;// good&lt;MyComponent variant=&quot;fancy&quot; /&gt; 声明组件 不要使用 displayName 来命名 React 组件, 而是使用引用来命名组件, 如 class 名称.12345678910// badexport default React.createClass(&#123; displayName: &apos;ReservationCard&apos;, // stuff goes here&#125;);// goodexport default class ReservationCard extends React.Component &#123;&#125; 代码缩进 遵循以下的 JSX 语法缩进/格式. eslint: react/jsx-closing-bracket-location1234567891011121314151617181920// bad&lt;Foo superLongParam=&quot;bar&quot; anotherSuperLongParam=&quot;baz&quot; /&gt;// good, 有多行属性的话, 新建一行关闭标签&lt;Foo superLongParam=&quot;bar&quot; anotherSuperLongParam=&quot;baz&quot;/&gt;// 若能在一行中显示, 直接写成一行&lt;Foo bar=&quot;bar&quot; /&gt;// 子元素按照常规方式缩进&lt;Foo superLongParam=&quot;bar&quot; anotherSuperLongParam=&quot;baz&quot;&gt; &lt;Quux /&gt;&lt;/Foo&gt; 使用双引号 对于 JSX 属性值总是使用双引号(“), 其他均使用单引号(‘). eslint: jsx-quotes 因为 HTML 属性也是用双引号, 因此 JSX 的属性也遵循此约定. 1234567891011// bad&lt;Foo bar=&apos;bar&apos; /&gt;// good&lt;Foo bar=&quot;bar&quot; /&gt;// bad&lt;Foo style=&#123;&#123; left: &quot;20px&quot; &#125;&#125; /&gt;// good&lt;Foo style=&#123;&#123; left: &apos;20px&apos; &#125;&#125; /&gt; 空格 总是在自动关闭的标签前加一个空格, 正常情况下不需要换行. eslint: no-multi-spaces, react/jsx-tag-spacing 123456789101112// bad&lt;Foo/&gt;// very bad&lt;Foo /&gt;// bad&lt;Foo /&gt;// good&lt;Foo /&gt; 不要在JSX {} 引用括号里两边加空格. eslint: react/jsx-curly-spacing 12345// bad&lt;Foo bar=&#123; baz &#125; /&gt;// good&lt;Foo bar=&#123;baz&#125; /&gt; 属性 JSX 属性名使用骆驼式风格camelCase. 1234567891011// bad&lt;Foo UserName=&quot;hello&quot; phone_number=&#123;12345678&#125;/&gt;// good&lt;Foo userName=&quot;hello&quot; phoneNumber=&#123;12345678&#125;/&gt; 如果属性值为 true, 可以直接省略. eslint: react/jsx-boolean-value 12345// bad&lt;Foo hidden=&#123;true&#125; /&gt;// good&lt;Foo hidden /&gt; 标签总是添加 alt 属性. 如果图片以陈述方式显示, alt 可为空, 或者 要包含role=”presentation”. eslint: jsx-a11y/alt-text 1234567891011// bad&lt;img src=&quot;hello.jpg&quot; /&gt;// good&lt;img src=&quot;hello.jpg&quot; alt=&quot;Me waving hello&quot; /&gt;// good&lt;img src=&quot;hello.jpg&quot; alt=&quot;&quot; /&gt;// good&lt;img src=&quot;hello.jpg&quot; role=&quot;presentation&quot; /&gt; 不要在 alt 值里使用如 “image”, “photo”, or “picture” 包括图片含义这样的词, 中文同理. eslint: jsx-a11y/img-redundant-alt 因为屏幕助读器已经把 img 标签标注为图片了, 所以没有必要再在 alt 里重复说明. 12345// bad&lt;img src=&quot;hello.jpg&quot; alt=&quot;Picture of me waving hello&quot; /&gt;// good&lt;img src=&quot;hello.jpg&quot; alt=&quot;Me waving hello&quot; /&gt; 使用有效正确的 aria role属性值 ARIA roles. eslint: jsx-a11y/aria-role 12345678// bad - not an ARIA role&lt;div role=&quot;datepicker&quot; /&gt;// bad - abstract ARIA role&lt;div role=&quot;range&quot; /&gt;// good&lt;div role=&quot;button&quot; /&gt; 不要在标签上使用 accessKey 属性. eslint: jsx-a11y/no-access-key 因为屏幕助读器在键盘快捷键与键盘命令时造成的不统一性会导致阅读性更加复杂. 12345// bad&lt;div accessKey=&quot;h&quot; /&gt;// good&lt;div /&gt; 避免使用数组的 index 来作为属性key的值, 推荐使用唯一ID. (Index as a key is an anti pattern) 123456789101112131415// bad&#123;todos.map((todo, index) =&gt;&lt;Todo &#123;...todo&#125; key=&#123;index&#125;/&gt;)&#125;// good&#123;todos.map(todo =&gt; (&lt;Todo &#123;...todo&#125; key=&#123;todo.id&#125;/&gt;))&#125; 对于所有非必填写属性, 总是手动去定义defaultProps属性. 因为 propTypes 可以作为组件的文档说明, 而声明 defaultProps 使阅读代码的人不需要去假设默认值. 另外, 显式的声明默认属性可以让你的组件跳过属性类型的检查. 1234567891011121314151617181920212223242526// badfunction SFC(&#123; foo, bar, children &#125;) &#123; return &lt;div&gt;&#123;foo&#125;&#123;bar&#125;&#123;children&#125;&lt;/div&gt;;&#125;SFC.propTypes = &#123; foo: PropTypes.number.isRequired, bar: PropTypes.string, children: PropTypes.node,&#125;;// goodfunction SFC(&#123; foo, bar, children &#125;) &#123; return &lt;div&gt;&#123;foo&#125;&#123;bar&#125;&#123;children&#125;&lt;/div&gt;;&#125;SFC.propTypes = &#123; foo: PropTypes.number.isRequired, bar: PropTypes.string, children: PropTypes.node,&#125;;SFC.defaultProps = &#123; bar: &apos;&apos;, children: null,&#125;; Refs 总是使用回调函数方式定义 ref. eslint: react/no-string-refs123456789// bad&lt;Foo ref=&quot;myRef&quot;/&gt;// good&lt;Foo ref=&#123;(ref) =&gt; &#123; this.myRef = ref; &#125;&#125;/&gt; 括号 将多行 JSX 标签写在 ()里. eslint: react/jsx-wrap-multilines123456789101112131415161718192021// badrender() &#123; return &lt;MyComponent className=&quot;long body&quot; foo=&quot;bar&quot;&gt; &lt;MyChild /&gt; &lt;/MyComponent&gt;;&#125;// goodrender() &#123; return ( &lt;MyComponent className=&quot;long body&quot; foo=&quot;bar&quot;&gt; &lt;MyChild /&gt; &lt;/MyComponent&gt; );&#125;// good, 单行可以不需要render() &#123; const body = &lt;div&gt;hello&lt;/div&gt;; return &lt;MyComponent&gt;&#123;body&#125;&lt;/MyComponent&gt;;&#125; 标签 对于没有子元素的标签, 总是自关闭标签. eslint: react/self-closing-comp 12345// bad&lt;Foo className=&quot;stuff&quot;&gt;&lt;/Foo&gt;// good&lt;Foo className=&quot;stuff&quot; /&gt; 如果组件有多行的属性, 关闭标签时新建一行. eslint: react/jsx-closing-bracket-location 12345678910// bad&lt;Foo bar=&quot;bar&quot; baz=&quot;baz&quot; /&gt;// good&lt;Foo bar=&quot;bar&quot; baz=&quot;baz&quot;/&gt; 函数/方法 使用箭头函数来获取本地变量. 123456789101112function ItemList(props) &#123; return ( &lt;ul&gt; &#123;props.items.map((item, index) =&gt; ( &lt;Item key=&#123;item.key&#125; onClick=&#123;() =&gt; doSomethingWith(item.name, index)&#125; /&gt; ))&#125; &lt;/ul&gt; );&#125; 当在 render() 里使用事件处理方法时, 提前在构造函数里把 this 绑定上去. eslint: react/jsx-no-bind 因为在每次 render 过程中, 再调用 bind 都会新建一个新的函数, 浪费资源. 123456789101112131415161718192021222324252627// badclass extends React.Component &#123; onClickDiv() &#123; // do stuff &#125; render() &#123; return &lt;div onClick=&#123;this.onClickDiv.bind(this)&#125; /&gt;; &#125;&#125;// goodclass extends React.Component &#123; constructor(props) &#123; super(props); this.onClickDiv = this.onClickDiv.bind(this); &#125; onClickDiv() &#123; // do stuff &#125; render() &#123; return &lt;div onClick=&#123;this.onClickDiv&#125; /&gt;; &#125;&#125; 在React组件中, 不要给所谓的私有函数添加 _ 前缀, 本质上它并不是私有的. 因为_ 下划线前缀在某些语言中通常被用来表示私有变量或者函数. 但是不像其他的一些语言, 在 JS 中没有原生支持所谓的私有变量, 所有的变量函数都是共有的. 了解更多详情请查看 Issue #1024, 和 #490 . 1234567891011121314151617// badReact.createClass(&#123; _onClickSubmit() &#123; // do stuff &#125;, // other stuff&#125;);// goodclass extends React.Component &#123; onClickSubmit() &#123; // do stuff &#125; // other stuff&#125; 在 render 方法中总是确保 return 返回值. eslint: react/require-render-return 123456789// badrender() &#123; (&lt;div /&gt;);&#125;// goodrender() &#123; return (&lt;div /&gt;);&#125; 组件生命周期书写顺序 class extends React.Component 的生命周期函数: static 方法（可选） constructor 构造函数 getChildContext 获取子元素内容 componentWillMount 组件渲染前 componentDidMount 组件渲染后 componentWillReceiveProps 组件将接受新的数据 shouldComponentUpdate 判断组件是否需要重新渲染 componentWillUpdate 上面的方法返回 true时, 组件将重新渲染 componentDidUpdate 组件渲染结束 componentWillUnmount 组件将从DOM中清除, 做一些清理任务 事件绑定 如 onClickSubmit() 或 onChangeDescription() render 里的 getter 方法 如 getSelectReason() 或 getFooterContent() 可选的 render 方法 如 renderNavigation() 或 renderProfilePicture() render render() 方法 如何定义 propTypes, defaultProps, contextTypes 等属性… 1234567891011121314151617181920212223242526import React, &#123; PropTypes &#125; from &apos;react&apos;;const propTypes = &#123; id: PropTypes.number.isRequired, url: PropTypes.string.isRequired, text: PropTypes.string,&#125;;const defaultProps = &#123; text: &apos;Hello World&apos;,&#125;;class Link extends React.Component &#123; static methodsAreOk() &#123; return true; &#125; render() &#123; return &lt;a href=&#123;this.props.url&#125; data-id=&#123;this.props.id&#125;&gt;&#123;this.props.text&#125;&lt;/a&gt;; &#125;&#125;Link.propTypes = propTypes;Link.defaultProps = defaultProps;export default Link; React.createClass 方式的生命周期函数（不推荐）与 ES6 class 方式稍有不同: eslint: react/sort-comp displayName 设定组件名称 propTypes 设置属性的类型 contextTypes 设置上下文类型 childContextTypes 设置子元素上下文类型 mixins 添加一些 mixins statics defaultProps 设置默认的属性值 getDefaultProps 获取默认属性值 getInitialState 获取初始状态 getChildContext componentWillMount componentDidMount componentWillReceiveProps shouldComponentUpdate componentWillUpdate componentDidUpdate componentWillUnmount clickHandlers or eventHandlers like onClickSubmit() or onChangeDescription() getter methods for render like getSelectReason() or getFooterContent() Optional render methods like renderNavigation() or renderProfilePicture() render isMounted 不要再使用 isMounted. eslint: react/no-is-mounted 因为isMounted 设计模式 在 ES6 class 中无法使用, 官方将在未来的版本里删除此方法.","categories":[{"name":"React","slug":"React","permalink":"https://devfpy.github.io/categories/React/"}],"tags":[{"name":"React JSX","slug":"React-JSX","permalink":"https://devfpy.github.io/tags/React-JSX/"}]},{"title":"iOS 读取Resource中的图片的正确姿势","slug":"ios-read-resourceimage","date":"2019-04-17T09:19:01.000Z","updated":"2019-04-17T09:19:28.036Z","comments":false,"path":"post/ios-read-resourceimage/","link":"https://devfpy.github.io/post/ios-read-resourceimage/","permalink":"https://devfpy.github.io/post/ios-read-resourceimage/","excerpt":"","text":"1234NSString *textFieldBgPath = [[[NSBundle mainBundle] resourcePath] stringByAppendingPathComponent:@&quot;login_bg_usertelephone.png&quot;];[_viewUserTelephone setBackgroundColor:[UIColor colorWithPatternImage:[UIImage imageWithContentsOfFile:textFieldBgPath]]];[_viewUserTelephone setContentMode:UIViewContentModeScaleToFill];","categories":[{"name":"iOS","slug":"iOS","permalink":"https://devfpy.github.io/categories/iOS/"}],"tags":[]},{"title":"CRA+DVA+FusionDesgin 项目搭建过程","slug":"create-react-app-DVA-FusionDesgin-createProject","date":"2019-04-17T09:10:55.000Z","updated":"2019-04-17T10:59:27.225Z","comments":false,"path":"post/create-react-app-DVA-FusionDesgin-createProject/","link":"https://devfpy.github.io/post/create-react-app-DVA-FusionDesgin-createProject/","permalink":"https://devfpy.github.io/post/create-react-app-DVA-FusionDesgin-createProject/","excerpt":"","text":"1、项目初始化1creact-react-app nodiot-fusiondesgin-demo 2、安装DVA1cd nodiot-fusiondesgin-demo 1yarn add dva 3、安装FusionDesign1yarn add @alifd/next 4、配置FusionDesign按需加载 4.1 安装react-app-rewired 1yarn add react-app-rewired 4.2 安装customize-cra 1yarn add customize-cra 4.3 安装babel-plugin-import 1yarn add babel-plugin-import 4.4 在项目根目录创建「config-overrides.js」文件 4.5 在「config-overrides.js」文件中配置组件按需加载 123456789const &#123; override, fixBabelImports &#125; = require(&apos;customize-cra&apos;);module.exports = override( fixBabelImports(&apos;import&apos;, &#123; libraryName: &apos;@alifd/next&apos;, libraryDirectory: &apos;es&apos;, style: true &#125;),); 4.6 修改「package.json」文件 123456&quot;scripts&quot;: &#123; &quot;start&quot;: &quot;react-app-rewired start&quot;, &quot;build&quot;: &quot;react-app-rewired build&quot;, &quot;test&quot;: &quot;react-app-rewired test&quot;, &quot;eject&quot;: &quot;react-app-rewired eject&quot; &#125;, 5、配置sass文件及主题 5.1 安装「sass-loader、node-sass」 1yarn add node-sass sass-loader 5.2 安装主题 1234yarn add @alifd/theme-1yarn add @alifd/theme-2yarn add @alifd/theme-3yarn add @alifd/theme-4 5.3 安装「@alifd/next-theme-webpack-plugin、@alifd/next-theme-loader」 12yarn add @alifd/next-theme-loaderyarn add @alifd/next-theme-webpack-plugin 5.4 安装「happypack」 1yarn add happypack 5.5 在「package.json」中添加主题配置 123&quot;buildConfig&quot;: &#123; &quot;theme&quot;: &quot;@alifd/theme-1&quot;&#125; 5.6 配置「config-overrides.js」文件 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116const ThemePlugin = require(&apos;@alifd/next-theme-webpack-plugin&apos;);const MiniCssExtractPlugin = require(&apos;mini-css-extract-plugin&apos;);const os = require(&apos;os&apos;);const HappyPack = require(&apos;happypack&apos;);const happyThreadPool = HappyPack.ThreadPool(&#123; size: os.cpus().length &#125;);let theme = &apos;&apos;;try &#123; const pkg = require(&apos;./package.json&apos;); if (pkg &amp;&amp; pkg.buildConfig &amp;&amp; pkg.buildConfig.theme) &#123; theme = pkg.buildConfig.theme; &#125;&#125; catch (e) &#123; console.log(&quot;read theme config error &quot;, e); console.log(`请在 package.json 中配置 buildConfig:&#123; theme: &apos;@alife/dpl-主题包名&apos; &#125;`);&#125;let scssLoader = [ &#123; loader: &apos;css-loader&apos;, options: &#123; minimize: true, sourceMap: false, &#125;, &#125;, // &#123; // loader: require.resolve(&apos;postcss-loader&apos;),//&apos;postcss-loader&apos;, // options: &#123; // indent: &apos;postcss&apos;, // plugins: () =&gt; [ // require(&apos;autoprefixer&apos;)(), // ], // sourceMap: false, // &#125;, // &#125;, &#123; loader: &apos;sass-loader&apos;, options: &#123; sourceMap: false, &#125;, &#125;,];const addThemeLoader = config =&gt; &#123; if (theme) &#123; console.log(`NOTICE: 注入 $&#123;theme&#125;/variables.scss 到每个 scss 文件`.green); scssLoader.push(&#123; loader: &apos;@alifd/next-theme-loader&apos;, options: &#123; theme &#125;, &#125;); &#125; config.module.rules[2].oneOf[5] = &#123; test: /\\.(scss|sass)$/, exclude: /\\.module\\.(scss|sass)$/, use: [ MiniCssExtractPlugin.loader, &apos;happypack/loader?id=scss&apos;, ], &#125;; config.module.rules[2].oneOf[6] = &#123; test: /\\.module\\.(scss|sass)$/, use: [ MiniCssExtractPlugin.loader, &apos;happypack/loader?id=scss&apos;, ], &#125;; return config;&#125;const addHappyPackPlugin = config =&gt; &#123; config.plugins.push( new HappyPack(&#123; id: &apos;scss&apos;, threadPool: happyThreadPool, loaders: scssLoader, &#125;) ) return config;&#125;const addThemePlugin = config =&gt; &#123; config.plugins.push(new ThemePlugin(&#123; theme &#125;)) return config&#125;const addMiniCssExtractPlugin = config =&gt; &#123; config.plugins.push( new MiniCssExtractPlugin(&#123; filename: &apos;[name].bundle.css&apos;, chunkFilename: &apos;[name].bundle.css&apos;, &#125;) ) return config;&#125;module.exports = override( addThemeLoader, addHappyPackPlugin, addThemePlugin, addMiniCssExtractPlugin, fixBabelImports(&apos;import&apos;, &#123; libraryName: &apos;@alifd/next&apos;, libraryDirectory: &apos;es&apos;, style: true &#125;),); 6、修改「src/index.js」启用dva12345678910import React from &apos;react&apos;;import ReactDOM from &apos;react-dom&apos;;import dva from &apos;dva&apos;;import &apos;./index.css&apos;;import App from &apos;./App&apos;;import * as serviceWorker from &apos;./serviceWorker&apos;;const app = dva();app.router(() =&gt; &lt;App /&gt;);app.start(&apos;#root&apos;); 7、编写代码启动项目 在「src/App.js」文件中添加代码： 1234567891011121314import React, &#123; Component &#125; from &apos;react&apos;;import &#123; Button &#125; from &apos;@alifd/next&apos;;class App extends Component &#123; render() &#123; return ( &lt;div className=&quot;App&quot;&gt; &lt;Button type=&quot;primary&quot;&gt;Primary&lt;/Button&gt; &lt;/div&gt; ); &#125;&#125;export default App; 启动项目 1npm start 8、处理@connect装饰器报错问题安装plugin-proposal-decorators 1yarn add @babel/plugin-proposal-decorators 修改config-overrides.js文件内容 1const &#123; override, fixBabelImports, addWebpackAlias, disableEsLint, addDecoratorsLegacy &#125; = require(&apos;customize-cra&apos;); 12345678910111213141516module.exports = override( addThemeLoader, addHappyPackPlugin, addThemePlugin, addMiniCssExtractPlugin, addDecoratorsLegacy(), disableEsLint(), addWebpackAlias(&#123; &apos;@&apos;: path.resolve(__dirname, &apos;src&apos;), &#125;), fixBabelImports(&apos;import&apos;, &#123; libraryName: &apos;@alifd/next&apos;, libraryDirectory: &apos;es&apos;, style: true &#125;),);","categories":[{"name":"React","slug":"React","permalink":"https://devfpy.github.io/categories/React/"}],"tags":[]},{"title":"ReactNative Android Unable to load script from assets 'index.android.bundle'.","slug":"index-android-bundle","date":"2019-04-17T06:30:40.000Z","updated":"2019-04-17T09:14:28.945Z","comments":false,"path":"post/index-android-bundle/","link":"https://devfpy.github.io/post/index-android-bundle/","permalink":"https://devfpy.github.io/post/index-android-bundle/","excerpt":"","text":"Unable to load script from assets ‘index.android.bundle’.Make sure your bundle is packaged correctly or you’re running a packager server. 创建文件夹andoird-app-src-main-assets react-native bundle –platform android –dev false –entry-file index.js –bundle-output android/app/src/main/assets/index.android.bundle –assets-dest android/app/src/main/res","categories":[{"name":"ReactNative","slug":"ReactNative","permalink":"https://devfpy.github.io/categories/ReactNative/"}],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-01-30T03:00:10.220Z","updated":"2019-01-30T03:00:10.220Z","comments":false,"path":"post/hello-world/","link":"https://devfpy.github.io/post/hello-world/","permalink":"https://devfpy.github.io/post/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}